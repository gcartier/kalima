;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Kalima
;;;


(module kalima.application jazz


(import (jazz.debuggee)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.locale.ui)
        (jazz.platform)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (kalima)
        (kalima.ui))


;; TODO
;; - button to redo the study (including the review)
;; - save font size in preferences
;; - backward / forward in study
;; - until an interface to reorder them, present themes sorted
;; - add, remove, reorder, group, ... themes
;; - browse by theme (theme combo-box)
;; - while studying change primary of an entry, save review -> error


;;;
;;;; Application
;;;


(class Kalima-Application extends Application

  
  (method override (process-name)
    "Kalima")
  
  
  (method override (process-owner)
    "Guillaume Cartier")
  
  
  (method override (process-copyright)
    "2010-2011")
  
  
  (method override (process-icon)
    "Doc")
  
  
  (method override (process-version)
    {Version 1 0 0})
  
  
  (method override (process-email)
    "gucartier@gmail.com")
  
  
  (method override (new-toplevel)
    (new Kalima-Toplevel))
  
  
  (method override (initialize-settings)
    (let ((file {File Home ".kalima" ".settings"}))
      (when (not (exists?~ file))
        (create~ file))
      (set! settings (new Settings file: file))))
  
  
  (method override (default-preferences)
    (new Kalima-Preferences))
  
  
  (method override (default-workspaces)
    (new Kalima-Workspaces))
  
  
  (method override (default-bindings)
    (new Kalima-Bindings))
  
  
  (method override (finish-process)
    (define (setup-locales)
      (register-locale (new Locale english: '(english: "English" french: "Anglais")))
      (register-locale (new Locale french: '(english: "French" french: "Fran√ßais"))))
    
    (define (reopen-dictionary)
      (let ((file (get-setting~ settings 'dictionary #f)))
        (when file
          (if (exists?~ file)
              (open-dictionary-file file)
            (message-box (format "Unable to find dictionary: {a}" (parse~ file)))))))
    
    (nextmethod)
    (setup-locales)
    (reopen-dictionary)
    (update-kalima-actions))

  
  ;;;
  ;;;; Events
  ;;;


  (method (on-new-dictionary evt)
    (new-dictionary))
    

  (method (on-open-dictionary evt)
    (open-dictionary))
  
  
  (method (on-close-dictionary evt)
    (close-dictionary))
  
  
  (method (on-browse evt)
    (new-frame Kalima-Browse-View))
  
  
  (method (on-study evt)
    (new-frame Kalima-Study-View))
  
  
  (method (on-edit evt)
    (new-frame Kalima-Edit-View))
  
  
  (method (on-keyboard evt)
    (new-frame Kalima-Keyboard))
  
  
  (method (on-test evt)
    )
  
  
  (method (on-insert evt)
    (let ((focus (get-focus)))
      (when focus
        (insert-string~ focus (get-property~ evt text:)))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (cons (find-actions 'kalima)
          (nextmethod)))
  
  
  (method public (update-kalima-actions)
    (let ((dictionary (get-current-dictionary)))
      (set-action-enabled? {Action kalima close} dictionary)
      (set-action-enabled? {Action kalima browse} dictionary)
      (set-action-enabled? {Action kalima study} dictionary)
      (set-action-enabled? {Action kalima edit} dictionary)))


  ;;;
  ;;;; Environment
  ;;;
  
  
  (method override (save-environment)
    (nextmethod)
    (let ((dictionary (get-current-dictionary)))
      (when (and dictionary (get-modified?~ dictionary))
        (save~ dictionary))))

  
  ;;;
  ;;;; Dictionary
  ;;;
  
  
  (method (new-dictionary)
    )
  
  
  (definition Dictionary-Extensions
    '(("Dictionaries" . "dic")))
  
  
  (method (open-dictionary)
    (let ((directory (or (get-setting~ settings 'current-directory #f) {Directory Home ".kalima" "dictionaries"})))
      (let ((file (choose-file directory: directory extensions: Dictionary-Extensions)))
        (close-dictionary)
        (open-dictionary-file file)
        (update-kalima-actions))))
  
  
  (method (open-dictionary-file file)
    (set-current-dictionary (load-dictionary file))
    (set-setting~ settings 'dictionary file)
    (save-content~ settings)
    (set-caption-base~ (get-toplevel) (format "Kalima {a}" (capitalize (get-base~ file)))))
  
  
  (method (close-dictionary)
    (let ((dictionary (get-current-dictionary)))
      (when dictionary
        (save~ dictionary)
        (set-current-dictionary #f)))
    (close-all)
    (set-caption-base~ (get-toplevel) "Kalima")
    (update-kalima-actions)))


;;;
;;;; Preferences
;;;


(class Kalima-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toplevel-state: maximized toolbar-classes: ((:menubar . {Reference Kalima-Menubar}) (:toolbar . {Reference Kalima-Toolbar}) (:status . {Reference Kalima-Status}))
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Workspaces
;;;


(class Kalima-Workspaces extends Workspaces-Preferences
  
  
  (form
    (<install>                          active: home
      (<Kalima-Workspace> name: home))))


;;;
;;;; Workspace
;;;


(class Kalima-Workspace extends Workspace-Preferences
  
  
  (form
    (<install>                                    title: "Home" icon: {Image-Resource "WorkspaceHome"}
      (<Menubar-Preferences>        name: menubar location: root
        (<Mainbar-Preferences>      name: toolbar location: second
          (<Status-Preferences>     name: status  location: second
            (<Stage-Preferences>    name: top     location: first maximized?: #f)))))))


;;;
;;;; Bindings
;;;


(class Kalima-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<Kalima-Actions>        name: kalima)
      (<Kalima-Browse-Actions> name: kalima-browse)
      (<Kalima-Study-Actions>  name: kalima-study)
      
      ;; emacs
      (<view~>
        (<!>          name: tab                          alternate-shortcut: {Shortcut :control #\I})
        (<!>          name: shift-tab                    alternate-shortcut: {Shortcut :control :shift #\I})
        (<!>          name: select-all                   shortcut: {Shortcut :control :alt #\A}))
      (<text~>
        (<!>          name: move-backward-char           alternate-shortcut: {Shortcut :control #\B})
        (<!>          name: extend-backward-char         alternate-shortcut: {Shortcut :control :shift #\B})
        (<!>          name: move-backward-word           alternate-shortcut: {Shortcut :alt #\B})
        (<!>          name: extend-backward-word         alternate-shortcut: {Shortcut :alt :shift #\B})
        (<!>          name: move-forward-char            alternate-shortcut: {Shortcut :control #\F})
        (<!>          name: extend-forward-char          alternate-shortcut: {Shortcut :control :shift #\F})
        (<!>          name: move-forward-word            alternate-shortcut: {Shortcut :alt #\F})
        (<!>          name: extend-forward-word          alternate-shortcut: {Shortcut :alt :shift #\F})
        (<!>          name: move-upward                  alternate-shortcut: {Shortcut :control #\P})
        (<!>          name: extend-upward                alternate-shortcut: {Shortcut :control :shift #\P})
        (<!>          name: move-downward                alternate-shortcut: {Shortcut :control #\N})
        (<!>          name: extend-downward              alternate-shortcut: {Shortcut :control :shift #\N})
        (<!>          name: delete-char                  alternate-shortcut: {Shortcut :control #\D})
        (<!>          name: delete-word                  alternate-shortcut: {Shortcut :alt #\D})
        (<!>          name: kill-line                    shortcut: {Shortcut :control #\K})
        (<!>          name: home                         alternate-shortcut: {Shortcut :control #\A})
        (<!>          name: extend-home                  alternate-shortcut: {Shortcut :control :shift #\A})
        (<!>          name: end                          alternate-shortcut: {Shortcut :control #\E})
        (<!>          name: extend-end                   alternate-shortcut: {Shortcut :control :shift #\E})
        (<!>          name: document-home                alternate-shortcut: {Shortcut :alt :shift #\,})
        (<!>          name: document-end                 alternate-shortcut: {Shortcut :alt :shift #\.})
        (<!>          name: prior                        alternate-shortcut: {Shortcut :control :shift #\M})
        (<!>          name: next                         alternate-shortcut: {Shortcut :control #\M})
        (<!>          name: widen-forward                shortcut: {Shortcut :control #\W}))
      (<tree~>
        (<!>          name: move-upward                  alternate-shortcut: {Shortcut :control #\P})
        (<!>          name: move-downward                alternate-shortcut: {Shortcut :control #\N})
        (<!>          name: move-left                    alternate-shortcut: {Shortcut :control #\B})
        (<!>          name: move-right                   alternate-shortcut: {Shortcut :control #\F})
        (<!>          name: home                         alternate-shortcut: {Shortcut :alt :shift #\,})
        (<!>          name: end                          alternate-shortcut: {Shortcut :alt :shift #\.})
        (<!>          name: prior                        alternate-shortcut: {Shortcut :control :shift #\M})
        (<!>          name: next                         alternate-shortcut: {Shortcut :control #\M}))
      (<menubar~>
        (<!>          name: navigate-downward            alternate-shortcut: {Shortcut :control #\N})
        (<!>          name: navigate-left                alternate-shortcut: {Shortcut :control #\B})
        (<!>          name: navigate-right               alternate-shortcut: {Shortcut :control #\F})
        (<!>          name: navigate-home                alternate-shortcut: {Shortcut :control #\A})
        (<!>          name: navigate-end                 alternate-shortcut: {Shortcut :control #\E}))
      (<menu~>
        (<!>          name: navigate-upward              alternate-shortcut: {Shortcut :control #\P})
        (<!>          name: navigate-downward            alternate-shortcut: {Shortcut :control #\N})
        (<!>          name: navigate-left                alternate-shortcut: {Shortcut :control #\B})
        (<!>          name: navigate-right               alternate-shortcut: {Shortcut :control #\F})
        (<!>          name: navigate-home                alternate-shortcut: {Shortcut :control #\A})
        (<!>          name: navigate-end                 alternate-shortcut: {Shortcut :control #\E})))))


;;;
;;;; Actions
;;;


(class Kalima-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: new      action-handler: {Event-Handler :application on-new-dictionary} shortcut: {Shortcut :control :alt #\N})
      (<Action-Item> name: open     action-handler: {Event-Handler :application on-open-dictionary} shortcut: {Shortcut :control :alt #\O})
      (<Action-Item> name: close    action-handler: {Event-Handler :application on-close-dictionary})
      (<Action-Item> name: browse   action-handler: {Event-Handler :application on-browse} shortcut: {Shortcut :control :shift #\B})
      (<Action-Item> name: study    action-handler: {Event-Handler :application on-study} shortcut: {Shortcut :control :shift #\S})
      (<Action-Item> name: edit     action-handler: {Event-Handler :application on-edit} shortcut: {Shortcut :control :shift #\E})
      (<Action-Item> name: keyboard action-handler: {Event-Handler :application on-keyboard} shortcut: {Shortcut :control :shift #\K})
      (<Action-Item> name: test     action-handler: {Event-Handler :application on-test} shortcut: {Shortcut :control #\T})
      (<Action-Item>                action-handler: {Event-Handler :application on-insert text: "√†"} shortcut: {Shortcut :control #\1})
      (<Action-Item>                action-handler: {Event-Handler :application on-insert text: "√¨"} shortcut: {Shortcut :control #\2})
      (<Action-Item>                action-handler: {Event-Handler :application on-insert text: "√π"} shortcut: {Shortcut :control #\3})
      (<Action-Item>                action-handler: {Event-Handler :application on-insert text: "√©"} shortcut: {Shortcut :control #\4})
      (<Action-Item>                action-handler: {Event-Handler :application on-insert text: "√®"} shortcut: {Shortcut :control #\5})
      (<Action-Item>                action-handler: {Event-Handler :application on-insert text: "√™"} shortcut: {Shortcut :control #\6})
      (<Action-Item>                action-handler: {Event-Handler :application on-insert text: "√¢"} shortcut: {Shortcut :control #\7})
      (<Action-Item>                action-handler: {Event-Handler :application on-insert text: "√¥"} shortcut: {Shortcut :control #\8})
      (<Action-Item>                action-handler: {Event-Handler :application on-insert text: "√ß"} shortcut: {Shortcut :control #\9}))))


;;;
;;;; Toplevel
;;;


(class Kalima-Toplevel extends Toplevel


  (form
    (<install> caption-base: "Kalima" size: {Dimension 850 550})))


;;;
;;;; Menubar
;;;


(class Kalima-Menubar extends Menubar
  
  
  (method override (install rest)
    (nextmethod rest)
    (with-update-locked
      (lambda ()
        (new Label-Item parent: self name: 'file   content: (new Kalima-File-Menu))
        (new Label-Item parent: self name: 'edit   content: (new Edit-Base-Menu))
        (new Label-Item parent: self name: 'kalima content: (new Dictionary-Menu))
        (new Label-Item parent: self name: 'window content: (new Kalima-Window-Menu))
        (new Label-Item parent: self name: 'help   content: (new Help-Menu))))))


;;;
;;;; File-Menu
;;;


(class Kalima-File-Menu extends Menu
  
  
  (form
    (<install>           title: {Locales english: "File" french: "Fichier"}
      (<Label-Item>      title: {Locales english: "New Dictionary" french: "Nouveau Dictionnaire"} icon: {Image-Resource "New"} action-handler: {Action kalima new})
      (<Label-Item>      title: {Locales english: "Open Dictionary..." french: "Ouvrir Dictionnaire..."} icon: {Image-Resource "Open"} action-handler: {Action kalima open})
      (<Label-Item>      title: {Locales english: "Close Dictionary" french: "Fermer Dictionnaire"} action-handler: {Action kalima close})
      (<Separator-Item>)
      (<Label-Item>      title: {Locales english: "Close Window" french: "Fermer la fen√™tre"} action-handler: {Action application close})
      (<Label-Item>      title: {Locales english: "Close All Windows" french: "Fermer toutes les fen√™tres"} action-handler: {Action application close-all})
      (<Separator-Item>)
      (<Label-Item>      title: {Locales english: "Quit" french: "Quitter"} action-handler: {Action application exit}))))


;;;
;;;; Dictionary-Menu
;;;


(class Dictionary-Menu extends Menu
  
  
  (form
    (<install>           title: {Locales english: "Dictionary" french: "Dictionnaire"}
      (<Label-Item>      title: {Locales english: "Browse" french: "Consulter"} icon: {Image-Resource "Doc"} action-handler: {Action kalima browse})
      (<Label-Item>      title: {Locales english: "Study" french: "√âtudier"} icon: {Image-Resource "Pad"} action-handler: {Action kalima study})
      (<Label-Item>      title: {Locales english: "Edit" french: "√âditer"} icon: {Image-Resource "WorkspaceText"} action-handler: {Action kalima edit})
      (<Separator-Item>)
      (<Label-Item>      title: {Locales english: "Keyboard" french: "Clavier"} icon: {Image-Resource "Build"} action-handler: {Action kalima keyboard}))))


;;;
;;;; Window-Menu
;;;


(class Kalima-Window-Menu extends Window-Menu
  
  
  (form
    (<install>
      (<!> name: zoom-separator    visible?: #f)
      (<!> name: zoom-horizontally visible?: #f)
      (<!> name: zoom-vertically   visible?: #f)
      (<!> name: maximize/restore  visible?: #f)
      (<!> name: full-screen       visible?: #f))))


;;;
;;;; Help-Menu
;;;


(class Help-Menu extends Menu
  
  
  (form
    (<install>          title: {Locales english: "Help" french: "Aide"}
      (<Label-Item>     title: {Locales english: "About Kalima..." french: "√Ä propos de Kalima..."} icon: {Image-Resource "About"} action-handler: {Action application about}))))


;;;
;;;; Toolbar
;;;


(class Kalima-Toolbar extends Toolbar


  (form
    (<install>
      (<Action-Icon> name: new        tooltip-text: {Locales english: "New Dictionary" french: "Nouveau Dictionnaire"} resource: {Image-Resource "New"} action-handler: {Action kalima new})
      (<Action-Icon> name: open       tooltip-text: {Locales english: "Open Dictionary..." french: "Ouvrir Dictionnaire..."} resource: {Image-Resource "Open"} action-handler: {Action kalima open})
      (<Separator>)
      (<Action-Icon> name: cut        tooltip-text: {Locales english: "Cut" french: "Couper"} resource: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Action-Icon> name: copy       tooltip-text: {Locales english: "Copy" french: "Copier"} resource: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Action-Icon> name: paste      tooltip-text: {Locales english: "Paste" french: "Coller"} resource: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Separator>)
      (<Action-Icon> name: undo       tooltip-text: {Locales english: "Undo" french: "Annuler"} resource: {Image-Resource "Undo"} action-handler: {Action view undo})
      (<Action-Icon> name: redo       tooltip-text: {Locales english: "Redo" french: "Refaire"} resource: {Image-Resource "Redo"} action-handler: {Action view redo})
      (<Separator>)
      (<Action-Icon> name: browse     tooltip-text: {Locales english: "Browse" french: "Consulter"} resource: {Image-Resource "Doc"} action-handler: {Action kalima browse})
      (<Separator>)
      (<Action-Icon> name: study      tooltip-text: {Locales english: "Study" french: "√âtudier"} resource: {Image-Resource "Pad"} action-handler: {Action kalima study})
      (<Separator>)
      (<Action-Icon> name: edit       tooltip-text: {Locales english: "Edit" french: "√âditer"} resource: {Image-Resource "WorkspaceText"} action-handler: {Action kalima edit})
      (<Separator>)
      (<Action-Icon> name: keyboard   tooltip-text: {Locales english: "Keyboard" french: "Clavier"} resource: {Image-Resource "Build"} action-handler: {Action kalima keyboard})
      @wait
      (<Separator>)
      @wait
      (<Action-Icon> name: test       tooltip-text: "Test" resource: {Image-Resource "Execute"} action-handler: {Action kalima test}))))


;;;
;;;; Status
;;;


(class Kalima-Status extends Status-Toolbar


  (form
    (<install>
      (<Status-Label> name: message size: {Dimension 782 20} location: center)
      (<Status-Label> name: locales title: "English" size: {Dimension 100 20} location: tail icon: {Image-Resource "Trait"} mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (on-context-menu evt)
    (let ((sender (get-sender~ evt)))
      (let ((name (get-name~ sender))
            (pos (acquire sender (get-position~ evt))))
        (case name
          ((locales) (track-popup-menu (new Locales-Menu) pos))))))
  
  
  (method (on-mouse-down evt)
    (let ((sender (get-sender~ evt)))
      (let ((name (get-name~ sender))
            (pos (acquire sender (get-position~ evt))))
        (case name
          ((locales) (track-popup-menu (new Locales-Menu) pos))))))))
