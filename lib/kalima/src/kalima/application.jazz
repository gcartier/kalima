;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Kalima
;;;


(module kalima.application jazz


(import (jazz.debuggee)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.platform)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (kalima)
        (kalima.ui))


;;;
;;;; Application
;;;


(class Kalima-Application extends Application

  
  (method override (process-name)
    "Kalima")
  
  
  (method override (process-owner)
    "Guillaume Cartier")
  
  
  (method override (process-copyright)
    "2010-2011")
  
  
  (method override (process-icon)
    "Doc")
  
  
  (method override (process-version)
    {Version 1 0 0})
  
  
  (method override (process-email)
    "gucartier@gmail.com")
  
  
  (method override (new-toplevel)
    (new Kalima-Toplevel))
  
  
  (method override (initialize-settings)
    (let ((file {File Home ".kalima" ".settings"}))
      (when (not (exists?~ file))
        (create~ file))
      (set! settings (new Settings file: file))))
  
  
  (method override (default-preferences)
    (new Kalima-Preferences))
  
  
  (method override (default-workspaces)
    (new Kalima-Workspaces))
  
  
  (method override (default-bindings)
    (new Kalima-Bindings))
  
  
  (method override (finish-process)
    (define (reopen-dictionary)
      (let ((file (get-setting~ settings 'dictionary #f)))
        (when file
          (if (exists?~ file)
              (open-dictionary-file file)
            (message-box (format "Unable to find dictionary: {a}" (parse~ file)))))))
    
    (nextmethod)
    (reopen-dictionary)
    (update-kalima-actions))

  
  ;;;
  ;;;; Frames
  ;;;


  (method override (default-frame-class)
    Kalima-Lesson-View)


  (method override (known-extension-frame-class ext)
    (cond ((member? ext '("txt" "text") test: extension=?) Plain-Text-View)
          ((member? ext '("dic") test: extension=?) Kalima-Text-View)
          (else (nextmethod ext))))

  
  ;;;
  ;;;; Events
  ;;;


  (method (on-new-dictionary evt)
    (new-dictionary))
    

  (method (on-open-dictionary evt)
    (open-dictionary))
  
  
  (method (on-close-dictionary evt)
    (close-dictionary))
  
  
  (method (on-dictionary evt)
    (new-frame Kalima-Dictionary-View))
  
  
  (method (on-lesson evt)
    (new-frame Kalima-Lesson-View))
  
  
  (method (on-edit evt)
    (new-frame Kalima-Edit-View))
  
  
  (method (on-test evt)
    )

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (cons (find-actions 'kalima)
          (nextmethod)))
  
  
  (method public (update-kalima-actions)
    (let ((dictionary (get-current-dictionary)))
      (set-action-enabled? {Action kalima close} dictionary)
      (set-action-enabled? {Action kalima dictionary} dictionary)
      (set-action-enabled? {Action kalima lesson} dictionary)
      (set-action-enabled? {Action kalima edit} dictionary)))

  
  ;;;
  ;;;; Dictionary
  ;;;
  
  
  (method (new-dictionary)
    )
  
  
  (definition Dictionary-Extensions
    '(("Dictionaries" . "dic")))
  
  
  (method (open-dictionary)
    (let ((directory (or (get-setting~ settings 'current-directory #f) {Directory Home ".kalima" "dictionaries"})))
      (let ((file (choose-file directory: directory extensions: Dictionary-Extensions)))
        (close-dictionary)
        (open-dictionary-file file)
        (update-kalima-actions))))
  
  
  (method (open-dictionary-file file)
    (set-current-dictionary (load-dictionary file))
    (set-setting~ settings 'dictionary file)
    (save-content~ settings)
    (set-caption-base~ (get-toplevel) (format "Kalima {a}" (capitalize (get-base~ file)))))
  
  
  (method (close-dictionary)
    (let ((dictionary (get-current-dictionary)))
      (when dictionary
        (save~ dictionary)
        (set-current-dictionary #f)))
    (close-all)
    (set-caption-base~ (get-toplevel) "Kalima")
    (update-kalima-actions)))


;;;
;;;; Preferences
;;;


(class Kalima-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toolbar-classes: ((:menubar . {Reference Kalima-Menubar}) (:toolbar . {Reference Kalima-Toolbar}) (:status . {Reference Kalima-Status}))
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Workspaces
;;;


(class Kalima-Workspaces extends Workspaces-Preferences
  
  
  (form
    (<install>                          active: home
      (<Kalima-Workspace> name: home))))


;;;
;;;; Workspace
;;;


(class Kalima-Workspace extends Workspace-Preferences
  
  
  (form
    (<install>                                    title: "Home" icon: {Image-Resource "WorkspaceHome"}
      (<Menubar-Preferences>        name: menubar location: root
        (<Mainbar-Preferences>      name: toolbar location: second
          (<Status-Preferences>     name: status  location: second
            (<Stage-Preferences>    name: top     location: first)))))))


;;;
;;;; Bindings
;;;


(class Kalima-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<Kalima-Actions> name: kalima))))


;;;
;;;; Actions
;;;


(class Kalima-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: new        action-handler: {Event-Handler :application on-new-dictionary} shortcut: {Shortcut :control :alt #\N})
      (<Action-Item> name: open       action-handler: {Event-Handler :application on-open-dictionary} shortcut: {Shortcut :control :alt #\O})
      (<Action-Item> name: close      action-handler: {Event-Handler :application on-close-dictionary} shortcut: {Shortcut :control :alt #\W})
      (<Action-Item> name: dictionary action-handler: {Event-Handler :application on-dictionary} shortcut: {Shortcut :control :shift #\D})
      (<Action-Item> name: lesson     action-handler: {Event-Handler :application on-lesson} shortcut: {Shortcut :control :shift #\L})
      (<Action-Item> name: edit       action-handler: {Event-Handler :application on-edit} shortcut: {Shortcut :control :shift #\E})
      (<Action-Item> name: test       action-handler: {Event-Handler :application on-test} shortcut: {Shortcut :shift #\T}))))


;;;
;;;; Toplevel
;;;


(class Kalima-Toplevel extends Toplevel


  (form
    (<install> caption-base: "Kalima" size: {Dimension 850 550})))


;;;
;;;; Menubar
;;;


(class Kalima-Menubar extends Menubar
  
  
  (method override (install rest)
    (nextmethod rest)
    (with-update-locked
      (lambda ()
        (new Label-Item parent: self name: 'file   content: (new Kalima-File-Menu))
        (new Label-Item parent: self name: 'edit   content: (new Edit-Base-Menu))
        (new Label-Item parent: self name: 'kalima content: (new Kalima-Menu))
        (new Label-Item parent: self name: 'window content: (new Kalima-Window-Menu))
        (new Label-Item parent: self name: 'help   content: (new Help-Menu))))))


;;;
;;;; File-Menu
;;;


(class Kalima-File-Menu extends Menu
  
  
  (form
    (<install>           title: {Locales english: "File" french: "Fichier"}
      (<Label-Item>      title: {Locales english: "New Dictionary" french: "Nouveau Dictionnaire"} icon: {Image-Resource "New"} action-handler: {Action kalima new})
      (<Label-Item>      title: {Locales english: "Open Dictionary..." french: "Ouvrir Dictionnaire..."} icon: {Image-Resource "Open"} action-handler: {Action kalima open})
      (<Label-Item>      title: {Locales english: "Close Dictionary" french: "Fermer Dictionnaire"} action-handler: {Action kalima close})
      (<Separator-Item>)
      (<Label-Item>      title: {Locales english: "Quit" french: "Quitter"} action-handler: {Action application exit}))))


;;;
;;;; Kalima-Menu
;;;


(class Kalima-Menu extends Menu
  
  
  (form
    (<install>           title: "Kalima"
      (<Label-Item>      title: {Locales english: "Dictionary" french: "Dictionnaire"} icon: {Image-Resource "Doc"} action-handler: {Action kalima dictionary})
      (<Label-Item>      title: {Locales english: "Lesson" french: "Leçon"} icon: {Image-Resource "Pad"} action-handler: {Action kalima lesson})
      (<Label-Item>      title: {Locales english: "Edit" french: "Éditer"} icon: {Image-Resource "WorkspaceText"} action-handler: {Action kalima edit}))))


;;;
;;;; Window-Menu
;;;


(class Kalima-Window-Menu extends Window-Menu
  
  
  (form
    (<install>
      (<!> name: zoom-separator    visible?: #f)
      (<!> name: zoom-horizontally visible?: #f)
      (<!> name: zoom-vertically   visible?: #f)
      (<!> name: maximize/restore  visible?: #f)
      (<!> name: full-screen       visible?: #f))))


;;;
;;;; Help-Menu
;;;


(class Help-Menu extends Menu
  
  
  (form
    (<install>          title: "Help"
      (<Label-Item>     title: "About Kalima..." icon: {Image-Resource "About"} action-handler: {Action application about}))))


;;;
;;;; Toolbar
;;;


(class Kalima-Toolbar extends Toolbar


  (form
    (<install>
      (<Action-Icon> name: new        tooltip-text: "New Dictionary" resource: {Image-Resource "New"} action-handler: {Action kalima new})
      (<Action-Icon> name: open       tooltip-text: "Open Dictionary" resource: {Image-Resource "Open"} action-handler: {Action kalima open})
      (<Separator>)
      (<Action-Icon> name: cut        tooltip-text: "Cut" resource: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Action-Icon> name: copy       tooltip-text: "Copy" resource: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Action-Icon> name: paste      tooltip-text: "Paste" resource: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Separator>)
      (<Action-Icon> name: undo       tooltip-text: "Undo" resource: {Image-Resource "Undo"} action-handler: {Action view undo})
      (<Action-Icon> name: redo       tooltip-text: "Redo" resource: {Image-Resource "Redo"} action-handler: {Action view redo})
      (<Separator>)
      (<Action-Icon> name: dictionary tooltip-text: "Dictionary" resource: {Image-Resource "Doc"} action-handler: {Action kalima dictionary})
      (<Separator>)
      (<Action-Icon> name: lesson     tooltip-text: "Lesson" resource: {Image-Resource "Pad"} action-handler: {Action kalima lesson})
      (<Separator>)
      (<Action-Icon> name: edit       tooltip-text: "Edit" resource: {Image-Resource "WorkspaceText"} action-handler: {Action kalima edit})
      @wait
      (<Separator>)
      @wait
      (<Action-Icon> name: test       tooltip-text: "Test" resource: {Image-Resource "Execute"} action-handler: {Action kalima test}))))


;;;
;;;; Status
;;;


(class Kalima-Status extends Status-Toolbar


  (form
    (<install>
      (<Status-Label> name: message size: {Dimension 782 20} location: center)))))
