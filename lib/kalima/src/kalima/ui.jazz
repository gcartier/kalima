;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Kalima UI
;;;


(module kalima.ui jazz


(import (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.view)
        (kalima))


(define font-sizes
  '(18 24 36 48 72))


(define-font Kalima
  font-name: "Times New Roman"
  point-size: 36)


;;;
;;;; View
;;;


(class Kalima-View extends Layout-View
  
  
  (method (change-size changer)
    (let ((center (locate 'center))
          (entry (locate 'entry))
          (primary (locate 'primary))
          (secondary (locate 'secondary)))
      (let ((point-size (changer font-sizes (get-point-size~ (get-font~ primary)) cycle?: #f)))
        (let ((font (new Font font-name: "Times New Roman" point-size: point-size)))
          (let ((height (font-height~ font)))
            (let ((spacer (fxround (/ height 5))))
              (set-height~ entry (+ height spacer height))
              (set-height~ primary height)
              (set-font~ primary font)
              (set-height~ secondary height)
              (set-font~ secondary font)))))
      (layout-view~ entry)
      (layout-view~ center))))


;;;
;;;; Browse
;;;


(class Kalima-Browse-View extends Kalima-View implements Dictionary-Listener
  
  
  (method meta override (host-icon)
    {Image-Resource "Doc"})
  
  (method meta override (host-title)
    {Locales english: "Browse" french: "Consulter"})
  
  (method meta override (host-position)
    {Point 834 25})
  
  (method meta override (host-size)
    {Dimension 800 697})
  
  
  (slot dictionary initialize #f)
  (slot themes     initialize #f)
  (slot entries    initialize #f)
  (slot entry      initialize #f)
  (slot theme      initialize #f)
  (slot language   initialize #f)
  
  
  (form
    (<install>                                           layout-type: border
      (<Layout-View>                    name: toolbar    size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Border-View>                                   size: {Dimension 140 22} border-insets: {Rect 2 2 2 1} border-color: {Color Medium}
          (<Border-View>                                 border-color: {Color Entry-Border}
            (<Combo-Box>                name: theme      content-change-handler: {Event-Handler :document on-theme})))
        (<Separator-View>                                size: {Dimension 4 0})
        (<Border-View>                                   size: {Dimension 140 22} border-insets: {Rect 2 2 2 1} border-color: {Color Medium}
          (<Border-View>                                 border-color: {Color Entry-Border}
            (<Combo-Box>                name: language   content-change-handler: {Event-Handler :document on-language})))
        (<Push-Tool>                                     location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Decrease Text" resource: {Image-Resource "FindNext"} portfolio: :images action-handler: {Event-Handler :form on-decrease})
        (<Separator>                                     location: tail size: {Dimension 2 0})
        (<Push-Tool>                                     location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Increase Text" resource: {Image-Resource "FindPrevious"} portfolio: :images action-handler: {Event-Handler :form on-increase})
        (<Separator>                                     location: tail size: {Dimension 16 0})
        (<Push-Tool>                                     location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Edit" resource: {Image-Resource "Script"} portfolio: :images action-handler: {Event-Handler :form on-edit})
        (<Separator>                                     location: tail size: {Dimension 2 0}))
      (<Border-View>                                     location: center border-type: edge style: entry
        (<Splitter-View>                                 background: {Color White} orientation: horz division: 175
          (<Scroller-View>                               location: first style: document hscroll?: #t vscroll?: #t
            (<!>                        name: content    layout-type: fill
              (<Tree-View>              name: entries    portfolio: :images selection-handler: {Event-Handler :form on-selection-change}
                (<Tree-Node-Column>                      title: "Word" display-images?: #f toplevel-controls?: #f width: 419))))
          (<Layout-View>                                 location: second layout-type: border
            (<Layout-View>              name: center     location: center layout-type: center
              (<Layout-View>            name: entry      layout-type: border size: {Dimension 600 110}
                (<Label-View>           name: primary    location: north size: {Dimension 600 50} justification: center font: {Font Kalima})
                (<Label-View>           name: secondary  location: south size: {Dimension 600 50} justification: center font: {Font Kalima})))
            (<Layout-View>                               size: {Dimension 200 20} location: south layout-type: fill layout-insets: {Rect 4 0 0 0}
              (<Label-View>             name: note)))))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup)
    (add-listener~ dictionary self))
  
  
  (method override (destroy)
    (remove-listener~ dictionary self)
    (nextmethod))
  
  
  (method override (focus-default)
    (focus-entries))
  
  
  (method (focus-entries)
    (let ((tree (locate 'entries)))
      (acquire-focus~ tree)
      (auto-select-first~ tree)))
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method (setup)
    (define (setup-theme)
      (let ((combo (locate 'theme)))
        (set-choices~ combo `((#f "All") ,@(map (lambda (theme) (list theme (get-subject~ theme))) (get-themes~ dictionary))))
        (set-value~ combo #f)))
    
    (define (setup-language)
      (set! language 'primary)
      (let ((combo (locate 'language)))
        (set-choices~ combo `((primary ,(get-primary~ dictionary)) (secondary ,(get-secondary~ dictionary))))
        (set-value~ combo 'primary)))
    
    (set! dictionary (get-current-dictionary))
    (setup-entries)
    (setup-theme)
    (setup-language)
    (setup-words))
  
  
  (method (setup-entries)
    (set! entries (if theme
                      (get-entries~ theme)
                    (collect-entries~ dictionary))))
  
  
  (method (setup-words)
    (let ((tree (locate 'entries))
          (getter (case language
                    ((primary) get-primary~)
                    ((secondary) get-secondary~))))
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (for-each (lambda (entry)
                      (let ((title (getter entry)))
                        (add-row~ tree children: (list (new Tree-Node title: title)) user-data: entry)))
                    (di-sort-ascending entries key: getter))))))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (get-tab-stops)
    (list
      (locate 'entries)))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions)
    (cons (find-actions 'kalima-browse)
          (nextmethod)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-decrease evt)
    (change-size previous-element))
  
  
  (method (on-increase evt)
    (change-size next-element))
  
  
  (method (on-edit evt)
    (if (not entry)
        (bell)
      (edit-entry entry 'primary)))
  
  
  (method (on-theme evt)
    (set! theme (get-value~ (get-sender~ evt)))
    (setup-entries)
    (setup-words)
    (display "" "")
    (display-note "")
    (focus-entries))
  
  
  (method (on-language evt)
    (set! language (get-value~ (get-sender~ evt)))
    (setup-words)
    (display "" "")
    (display-note "")
    (focus-entries))
  
  
  (method (on-selection-change evt)
    (let ((tree (get-sender~ evt)))
      (set! entry (get-single-selected-data~ tree))
      (update)))
  
  
  (method override (entry-change dictionary changed-entry)
    (when (eq? changed-entry entry)
      (update)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update)
    (let ((primary (get-primary~ entry))
          (secondary (get-secondary~ entry))
          (note (get-note~ entry)))
      (display primary secondary)
      (display-note note)))
  
  
  (method (display primary secondary)
    (let ((label (locate 'primary)))
      (set-color~ label {Color Black})
      (set-title~ label primary))
    (let ((label (locate 'secondary)))
      (set-color~ label {Color Dark-Green})
      (set-title~ label secondary)))
  
  
  (method (display-note text)
    (let ((label (locate 'note)))
      (set-title~ label text))))


;;;
;;;; Browse-Actions
;;;


(class Kalima-Browse-Actions extends Actions


  (form
    (<install>
      (<Action-Item> name: increase action-handler: {Event-Handler :focus-guest on-increase} shortcut: {Shortcut :control #\+})
      (<Action-Item> name: decrease action-handler: {Event-Handler :focus-guest on-decrease} shortcut: {Shortcut :control #\-})
      (<Action-Item> name: edit     action-handler: {Event-Handler :focus-guest on-edit} shortcut: {Shortcut :alt #\E} alternate-shortcut: {Shortcut F2}))))


;;;
;;;; Study
;;;


(class Kalima-Study-View extends Kalima-View implements Dictionary-Listener
  
  
  (method meta override (host-icon)
    {Image-Resource "Pad"})
  
  (method meta override (host-title)
    {Locales english: "Study" french: "Ã‰tudier"})
  
  (method meta override (host-position)
    {Point 25 25})
  
  (method meta override (host-size)
    {Dimension 800 500})
  
  
  (slot dictionary initialize #f)
  (slot entries    initialize #f)
  (slot entry      initialize #f)
  (slot ask        initialize #f)
  (slot language   initialize #f)
  (slot stage      initialize #f)
  (slot right      initialize #f)
  (slot review     initialize #f)
  
  
  (form
    (<install>                                           layout-type: border
      (<Layout-View>                    name: toolbar    size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Border-View>                                   size: {Dimension 60 22} border-insets: {Rect 2 2 2 1} border-color: {Color Medium}
          (<Border-View>                                 border-color: {Color Entry-Border}
            (<Combo-Box>                name: select     content-change-handler: {Event-Handler :document on-select})))
        (<Separator-View>                                size: {Dimension 4 0})
        (<Border-View>                                   size: {Dimension 140 22} border-insets: {Rect 2 2 2 1} border-color: {Color Medium}
          (<Border-View>                                 border-color: {Color Entry-Border}
            (<Combo-Box>                name: ask        content-change-handler: {Event-Handler :document on-ask})))
        (<Separator>                                     size: {Dimension 14 0})
        (<Push-Tool>                                     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Review" resource: {Image-Resource "Edit"} portfolio: :images action-handler: {Event-Handler :form on-review})
        (<Separator>                                     size: {Dimension 8 0})
        (<Push-Tool>                                     size: {Dimension 22 22} tooltip?: #t tooltip-text: "New Theme..." resource: {Image-Resource "ImportConfiguration"} portfolio: :images action-handler: {Event-Handler :form on-new-theme})
        (<Push-Tool>                                     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Augment Theme..." resource: {Image-Resource "ImportNew"} portfolio: :images action-handler: {Event-Handler :form on-augment-theme})
        (<Push-Tool>                                     location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Save Session" resource: {Image-Resource "Save"} portfolio: :images action-handler: {Event-Handler :form on-save-session})
        (<Separator>                                     location: tail size: {Dimension 20 0})
        (<Push-Tool>                                     location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Decrease Text" resource: {Image-Resource "FindNext"} portfolio: :images action-handler: {Event-Handler :form on-decrease})
        (<Separator>                                     location: tail size: {Dimension 2 0})
        (<Push-Tool>                                     location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Increase Text" resource: {Image-Resource "FindPrevious"} portfolio: :images action-handler: {Event-Handler :form on-increase})
        (<Separator>                                     location: tail size: {Dimension 16 0})
        (<Push-Tool>                                     location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Edit" resource: {Image-Resource "Script"} portfolio: :images action-handler: {Event-Handler :form on-edit})
        (<Separator>                                     location: tail size: {Dimension 2 0}))
      (<Border-View>                                     location: center border-type: edge style: entry
        (<Splitter-View>                                 background: {Color White} orientation: horz division: 125
          (<Scroller-View>                               location: first style: document hscroll?: #t vscroll?: #t
            (<!>                        name: content    layout-type: fill
              (<Tree-View>              name: subjects   multiple-selection?: #t portfolio: :images
                (<Tree-Node-Column>                      title: "Subject" display-images?: #f toplevel-controls?: #f width: 419))))
          (<Layout-View>                                 location: second layout-type: border
            (<Layout-View>              name: center     location: center layout-type: center
              (<Layout-View>            name: entry      layout-type: border size: {Dimension 4000 110}
                (<Label-View>           name: primary    location: north size: {Dimension 4000 50} justification: center font: {Font Kalima} mouse-down-handler: {Event-Handler :form on-entry})
                (<Label-View>           name: secondary  location: south size: {Dimension 4000 50} justification: center font: {Font Kalima} mouse-down-handler: {Event-Handler :form on-entry})))
            (<Layout-View>                               size: {Dimension 200 20} location: south layout-type: fill layout-insets: {Rect 4 0 4 0}
              (<Layout-View>                             layout-type: border
                (<Label-View>           name: note       size: {Dimension 100 20} location: west)
                (<Label-View>           name: statistics size: {Dimension 250 20} location: east justification: tail))))))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (random-seed)
    (setup)
    (add-listener~ dictionary self))
  
  
  (method override (destroy)
    (remove-listener~ dictionary self)
    (nextmethod))
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method (setup)
    (define (setup-select)
      (let ((combo (locate 'select)))
        (set-choices~ combo '((none {Locales english: "None" french: "Aucun"}) (all {Locales english: "All" french: "Tous"})))
        (set-value~ combo 'none)))
    
    (define (setup-ask)
      (let ((combo (locate 'ask))
            (random {Locales english: "Random" french: "AlÃ©atoire"})
            (both {Locales english: "Both" french: "Les deux"}))
        (set-choices~ combo `((primary ,(get-primary~ dictionary)) (secondary ,(get-secondary~ dictionary)) (:random ,random) (:both ,both)))
        (set-value~ combo 'primary)))
    
    (set! dictionary (get-current-dictionary))
    (set! ask 'primary)
    (setup-select)
    (setup-ask)
    (setup-subjects selected: '("<Session>"))
    (subjects-update))
  
  
  (method (setup-subjects (selected: selected '()))
    (define (collect-subjects)
      (let ((queue (new-queue)))
        (for-each (lambda (theme)
                    (let ((subject (get-subject~ theme)))
                      (enqueue queue (cons subject theme))))
                  (get-themes~ dictionary))
        (queue-list queue)))
    
    (let ((tree (locate 'subjects)))
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (for-each (lambda (info)
                      (bind (subject . theme) info
                        (let ((handler (new Event-Handler execute: (lambda (evt) (subjects-update)))))
                          (let ((title (if (starts-with? subject "<") (format "{a} ({a})" subject (length (get-entries~ theme))) subject))
                                (checked? (member? subject selected)))
                            (let ((node (new Check-Box title: title checked?: checked? content-change-handler: handler)))
                              (add-row~ tree children: (list node) user-data: theme))))))
                    (collect-subjects))))))
  
  
  (method (subjects-update)
    (define (collect-entries)
      (let ((tree (locate 'subjects))
            (entries (new-queue)))
        (for-each-visible-row~ tree
          (lambda (row line)
            (let ((checkbox (first-child~ row)))
              (when (get-checked?~ checkbox)
                (let ((theme (get-user-data~ row)))
                  (for-each (lambda (entry)
                              (unless (memq? entry (queue-list entries))
                                (enqueue entries entry)))
                            (get-entries~ theme)))))))
        (queue-list entries)))
    
    (setup-entries (collect-entries)))
  
  
  (method (setup-entries lst)
    (set! entries lst)
    (set! stage 'question)
    (set! right '())
    (set! review '())
    (ask-word))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (get-tab-stops)
    (list
      self))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions)
    (cons (find-actions 'kalima-study)
          (nextmethod)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-select evt)
    (let ((checked? (case (get-value~ (get-sender~ evt))
                      ((none) #f)
                      ((all) #t)))
          (tree (locate 'subjects)))
      (for-each-visible-row~ tree
        (lambda (row line)
          (let ((checkbox (first-child~ row)))
            (set-checked?~ checkbox checked?)))))
    (subjects-update))
  
  
  (method (on-ask evt)
    (set! ask (get-value~ (get-sender~ evt)))
    (ask-word))
  
  
  (method (on-review evt)
    (setup-entries review))
  
  
  (method (on-new-theme evt)
    (let ((subject (request-subject "New Theme")))
      (save-theme subject entries)))
  
  
  (method (on-augment-theme evt)
    (let ((subject (request-subject "Augment Theme")))
      (save-theme subject entries augment?: #t)))
  
  
  (method (on-augment-session evt)
    (on-save-session #t))
  
  
  (method (on-replace-session evt)
    (on-save-session #f))
  
  
  (method (on-save-session augment?)
    (let ((review-selected? (theme-selected? "<Review>"))
          (session-selected? (theme-selected? "<Session>")))
      (save-theme "<Review>" review augment?: (and augment? (not review-selected?)) select?: #f)
      (save-theme "<Session>" entries augment?: (and augment? (not session-selected?)))))
  
  
  (method (request-subject title (prefix: prefix #f) (initial-value: initial-value #f))
    (let ((prefix (or prefix "Subject:"))
          (initial-value (or initial-value "<Review>")))
      (request-string title: title prefix: prefix initial-value: initial-value)))
  
  
  (method (save-theme subject entries (augment?: augment? #f) (select?: select? #t))
    (let ((references (map get-primary~ entries)))
      (let ((actual (find-theme~ dictionary subject)))
        (let ((theme (new Kalima-Theme dictionary subject (if (and augment? actual)
                                                              (remove-duplicates (append (map get-primary~ (get-entries~ actual)) references) test: equal?)
                                                            references))))
          (replace-theme~ dictionary theme)
          (setup-subjects)
          (when select?
            (select-theme theme))
          theme))))
  
  
  (method (select-theme theme)
    (let ((tree (locate 'subjects)))
      (let ((row (user-data-row~ tree theme)))
        (let ((checkbox (first-child~ row)))
          (set-checked?~ checkbox #t)
          (subjects-update)))))
  
  
  (method (theme-selected? subject)
    (let ((theme (find-theme~ dictionary subject)))
      (when theme
        (let ((tree (locate 'subjects)))
          (let ((row (user-data-row~ tree theme)))
            (let ((checkbox (first-child~ row)))
              (get-checked?~ checkbox)))))))
  
  
  (method (on-decrease evt)
    (change-size previous-element))
  
  
  (method (on-increase evt)
    (change-size next-element))
  
  
  (method (on-edit evt)
    (if (not entry)
        (bell)
      (edit-entry entry (displayed))))
  
  
  (method (on-entry evt)
    (acquire-focus~ self))
  
  
  (method override (key-press key)
    (case key
      ((#\space)
       (review-answer))))
  
  
  (method override (return-press key)
    (if (eq? ask :both)
        (right-answer)
      (case stage
        ((question)
         (show-answer))
        ((answer)
         (right-answer)))))
  
  
  (method override (tab-press key modifiers)
    (right-answer))
  
  
  (method override (entry-change dictionary changed-entry)
    (when (eq? changed-entry entry)
      (update)))
  
  
  ;;;
  ;;;; Management
  ;;;
  
  
  (method (ask-word)
    (if (null? entries)
        (set! entry #f)
      (set! stage 'question)
      (set! language (case ask
                       ((:random) (random-element '(primary secondary)))
                       ((:both) 'secondary)
                       (else ask)))
      (set! entry (random-element entries)))
    (update))
  
  
  (method (show-answer)
    (when entry
      (set! stage 'answer)
      (update)))
  
  
  (method (right-answer)
    (when entry
      (set! entries (remove entry entries))
      (unless (memq? entry right)
        (set! right (cons entry right)))
      (ask-word)))
  
  
  (method (review-answer)
    (when entry
      (set! entries (remove entry entries))
      (unless (memq? entry review)
        (set! review (cons entry review)))
      (ask-word)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update)
    (if (not entry)
        (begin
          (display "" "")
          (display-note ""))
      (let ((primary (get-primary~ entry))
            (secondary (get-secondary~ entry))
            (note (get-note~ entry)))
        (if (or (eq? ask :both)
                (eq? stage 'answer))
            (display primary secondary)
          (case language
            ((primary) (display primary ""))
            ((secondary) (display "" secondary))))
        (display-note note)))
    (statistics))
  
  
  (method (displayed)
    (case stage
      ((question)
       language)
      ((answer)
       (case language
         ((primary) 'secondary)
         ((secondary) 'primary)))))
  
  
  (method (display primary secondary)
    (let ((label (locate 'primary)))
      (set-color~ label {Color Black})
      (set-title~ label primary))
    (let ((label (locate 'secondary)))
      (set-color~ label {Color Dark-Green})
      (set-title~ label secondary)))
  
  
  (method (display-note text)
    (let ((label (locate 'note)))
      (set-title~ label text)))
  
  
  (method (statistics)
    (let ((label (locate 'statistics)))
      (set-title~ label (format "Right: {a}, review: {a}, remaining: {a}" (length right) (length review) (length entries))))))


;;;
;;;; Study-Actions
;;;


(class Kalima-Study-Actions extends Actions


  (form
    (<install>
      (<Action-Item> name: review          action-handler: {Event-Handler :focus-guest on-review} shortcut: {Shortcut :alt #\R})
      (<Action-Item> name: new-theme       action-handler: {Event-Handler :focus-guest on-new-theme} shortcut: {Shortcut :alt #\N})
      (<Action-Item> name: augment-theme   action-handler: {Event-Handler :focus-guest on-augment-theme} shortcut: {Shortcut :alt #\A})
      (<Action-Item> name: augment-session action-handler: {Event-Handler :focus-guest on-augment-session} shortcut: {Shortcut :alt #\S})
      (<Action-Item> name: replace-session action-handler: {Event-Handler :focus-guest on-replace-session} shortcut: {Shortcut :alt :shift #\S})
      (<Action-Item> name: increase        action-handler: {Event-Handler :focus-guest on-increase} shortcut: {Shortcut :control #\+})
      (<Action-Item> name: decrease        action-handler: {Event-Handler :focus-guest on-decrease} shortcut: {Shortcut :control #\-})
      (<Action-Item> name: edit            action-handler: {Event-Handler :focus-guest on-edit} shortcut: {Shortcut :alt #\E} alternate-shortcut: {Shortcut F2}))))


;;;
;;;; Edit
;;;


(class Kalima-Edit-View extends Layout-View
  
  
  (method meta override (host-icon)
    {Image-Resource "WorkspaceText"})
  
  (method meta override (host-title)
    {Locales english: "Edit" french: "Ã‰diter"})
  
  (method meta override (host-position)
    {Point 25 534})
  
  (method meta override (host-size)
    {Dimension 800 500})
  
  
  (slot dictionary initialize #f)
  (slot selected   initialize #f)
  
  
  (form
    (<install>                                           layout-type: border
      (<Layout-View>                    name: toolbar    size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Push-Tool>                                     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Add Entry" resource: {Image-Resource "Add"} portfolio: :images action-handler: {Event-Handler :form on-add})
        (<Separator>                                     size: {Dimension 4 0})
        (<Push-Tool>                                     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Remove Entry" resource: {Image-Resource "Remove"} portfolio: :images action-handler: {Event-Handler :form on-remove}))
      (<Border-View>                                     location: center border-type: edge style: entry
        (<Splitter-View>                                 background: {Color White} orientation: vert division: -183
          (<Scroller-View>                               location: first style: document hscroll?: #t vscroll?: #t
            (<!>                         name: content   layout-type: fill
              (<Tree-Header>                             style: document
                (<!>                     name: content
                  (<Tree-View>           name: entries   filled-column: note portfolio: :images multiple-selection?: #t selection-handler: {Event-Handler :form on-selection-change}
                    (<Tree-Node-Column>  name: primary   title: "" display-images?: #f toplevel-controls?: #f width: 175)
                    (<Tree-Label-Column> name: secondary title: "" width: 175)
                    (<Tree-Label-Column> name: note      title: "Note")
                    (<Tree-Label-Column> name: themes    title: "Themes" width: 200))))))
          (<Layout-View>                                 location: second layout-type: center
            (<Kalima-Entry-View>         name: entry     size: {Dimension 570 80} location: center))))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup))
  
  
  (method override (focus-default)
    (let ((tree (locate 'entries)))
      (acquire-focus~ tree)
      (auto-select-first~ tree)))
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method (setup)
    (set! dictionary (get-current-dictionary))
    (set-dictionary~ (locate 'entry) dictionary)
    (setup-entries))
  
  
  (method (setup-entries)
    (define (present-themes entry)
      (let ((themes (collect-themes~ dictionary entry)))
        (if (null? themes)
            ""
          (join (map get-subject~ themes) ", "))))
    
    (let ((entries (collect-entries~ dictionary))
          (tree (locate 'entries)))
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (for-each (lambda (entry)
                      (let ((primary (get-primary~ entry))
                            (secondary (get-secondary~ entry))
                            (note (get-note~ entry))
                            (themes (present-themes entry)))
                        (add-row~ tree children: (list (new Tree-Node title: primary) (new Tree-Label title: secondary) (new Tree-Label title: note) (new Tree-Label title: themes)) user-data: entry)))
                    (di-sort-ascending entries key: get-primary~))))
      (let ((primary (get-primary~ dictionary))
            (secondary (get-secondary~ dictionary)))
        (set-title~ (locate 'primary) primary)
        (set-title~ (locate 'secondary) secondary)
        (let ((entry (locate 'entry)))
          (set-title~ (locate~ entry 'primary-label) (format "{a}:" primary))
          (set-title~ (locate~ entry 'secondary-label) (format "{a}:" secondary))))))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (get-tab-stops)
    (list
      (locate 'entries)
      (locate '(entry primary))
      (locate '(entry secondary))
      (locate '(entry note))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-add evt)
    (let ((tree (locate 'entries))
          (entry (new Kalima-Entry "" "" "")))
      (add-entry~ dictionary entry)
      (setup-entries)
      (select-user-data-row~ tree entry)))
  
  
  (method (on-remove evt)
    (let ((tree (locate 'entries)))
      (let ((rows (get-selected-rows~ tree)))
        (for-each (lambda (row)
                    (let ((entry (get-user-data~ row))
                          (count (get-visible-count~ tree)))
                      (let ((next (and (> count 1) (or (get-next~ row) (get-row~ tree (- count 2))))))
                        (remove-entry~ dictionary entry)
                        (setup-entries)
                        (when next
                          (select-user-data-row~ tree (get-user-data~ next))))))
                  rows))))
  
  
  (method (on-selection-change evt)
    (let ((tree (get-sender~ evt)))
      (let ((entries (get-selected-data~ tree)))
        (select-entries entries))))
  
  
  (method (select-entries entries (field #f))
    (let ((entry-view (locate 'entry)))
      (set-entries~ entry-view entries)
      (set! selected entries)
      (when field
        (let ((text-view (locate~ entry-view field)))
          (select-all~ text-view)
          (acquire-focus~ text-view)))))
  
  
  (method (text-change field content)
    (for-each (lambda (entry)
                (update-entry~ dictionary entry field content))
              selected)))


(definition (edit-entry entry field)
  (let ((frame (find-frame-host Kalima-Edit-View)))
    (let ((editor (if frame
                      (begin
                        (focus-host~ frame)
                        (get-guest~ frame))
                    (get-guest~ (new-frame Kalima-Edit-View)))))
      (select-entries~ editor (list entry) field))))


;;;
;;;; Entry
;;;


(class Kalima-Entry-View extends View
  
  
  (slot dictionary initialize #f accessors generate)
  (slot entries    initialize #f getter generate)
  
  
  (form
    (<install>
      (<Label-View>                   name: primary-label             position: {Point 0 2} size: {Dimension 40 16} font: {Font Label})
      (<Border-View>                                                  position: {Point 46 0} size: {Dimension 300 19} border-type: edge style: entry
        (<Scroller-View>                                              hscroll?: #f vscroll?: #f
          (<!>                        name: content                   layout-type: fill
            (<Kalima-Entry-Text-View> name: primary))))
      (<Label-View>                   name: secondary-label           position: {Point 0 32} size: {Dimension 40 16} font: {Font Label})
      (<Border-View>                                                  position: {Point 46 30} size: {Dimension 300 19} border-type: edge style: entry
        (<Scroller-View>                                              hscroll?: #f vscroll?: #f
          (<!>                        name: content                   layout-type: fill
            (<Kalima-Entry-Text-View> name: secondary))))
      (<Label-View>                                   title: "Note:"  position: {Point 0 63} size: {Dimension 40 16} font: {Font Label})
      (<Border-View>                                                  position: {Point 46 60} size: {Dimension 300 19} border-type: edge style: entry
        (<Scroller-View>                                              hscroll?: #f vscroll?: #f
          (<!>                        name: content                   layout-type: fill
            (<Kalima-Entry-Text-View> name: note))))
      (<Label-View>                                   title: "Theme:" position: {Point 380 2} size: {Dimension 40 16} font: {Font Label})
      (<Border-View>                                                  position: {Point 426 0} size: {Dimension 140 20} border-color: {Color Entry-Border}
        (<Combo-Box>                  name: theme1                    content-change-handler: {Event-Handler :form on-theme}))
      (<Label-View>                                   title: "Theme:" position: {Point 380 32} size: {Dimension 40 16} font: {Font Label})
      (<Border-View>                                                  position: {Point 426 30} size: {Dimension 140 20} border-color: {Color Entry-Border}
        (<Combo-Box>                  name: theme2                    content-change-handler: {Event-Handler :form on-theme}))
      (<Label-View>                                   title: "Theme:" position: {Point 380 62} size: {Dimension 40 16} font: {Font Label})
      (<Border-View>                                                  position: {Point 426 60} size: {Dimension 140 20} border-color: {Color Entry-Border}
        (<Combo-Box>                  name: theme3                    content-change-handler: {Event-Handler :form on-theme}))))
  
  
  (method (set-entries entries)
    (define (unique objects)
      (let ((uniques (remove-duplicates objects test: equal?)))
        (and (= 1 (length uniques))
             (car uniques))))
    
    (define (unique-theme themes-list index)
      (unique (map (lambda (themes)
                     (and (>= (length themes) index) (element themes (- index 1))))
                   themes-list)))
    
    (define (setup-theme name theme)
      (let ((combo (locate name)))
        (set-choices~ combo (cons (list #f "<None>") (map (lambda (theme) (list theme (get-subject~ theme))) (get-themes~ dictionary))))
        (set-value~ combo theme)))
    
    (set! entries~self entries)
    (let ((entry (and (= 1 (length entries)) (car entries))))
      (let ((primary (unique (map get-primary~ entries)))
            (secondary (unique (map get-secondary~ entries)))
            (note (unique (map get-note~ entries)))
            (themes-list (map (lambda (entry)
                                (collect-themes~ dictionary entry))
                              entries)))
        (set-string-content~ (locate 'primary) (or primary ""))
        (set-string-content~ (locate 'secondary) (or secondary ""))
        (set-string-content~ (locate 'note) (or note ""))
        (setup-theme 'theme1 (unique-theme themes-list 1))
        (setup-theme 'theme2 (unique-theme themes-list 2))
        (setup-theme 'theme3 (unique-theme themes-list 3)))))
  
  
  (method (on-theme evt)
    (define (collect-themes)
      (remove-duplicates (collect get-value~ (list (locate 'theme1) (locate 'theme2) (locate 'theme3)))))
    
    (let ((themes (collect-themes)))
      (for-each (lambda (entry)
                  (update-themes~ dictionary entry themes))
                entries))))


;;;
;;;; Entry-Text
;;;


(class Kalima-Entry-Text-View extends Plain-Text-View
  
  
  (form
    (<install> accepts-returns?: #f show-unfocused-selection?: #f return-press-handler: {Event-Handler :form on-return-press}))
  
  
  (method override (new-model)
    (new Text-Model base-style: {Text-Style Text-User} left-padding: 2 top-padding: 2))
  
  
  (method override (content-change origin)
    (nextmethod origin)
    (let ((editor (find-ascendant Kalima-Edit-View)))
      (text-change~ editor name (get-string-content))))
  
  
  (method override (on-return-press evt)
    (close~ (get-host))))


;;;
;;;; Keyboard
;;;


(class Kalima-Keyboard extends Layout-View
  
  
  (method meta override (host-icon)
    {Image-Resource "Build"})
  
  (method meta override (host-title)
    {Locales english: "Keyboard" french: "Clavier"})
  
  (method meta override (host-position)
    {Point 834 728})
  
  (method meta override (host-size)
    {Dimension 800 306})
  
  
  (form
    (<install>                                              size: {Dimension 420 639} layout-type: border
      (<Layout-View>                   name: toolbar        size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Push-Tool>                                        enabled?: #f size: {Dimension 22 22} tooltip?: #t tooltip-text: "Add Shortcut" resource: {Image-Resource "Add"} portfolio: :images action-handler: {Event-Handler :form on-add})
        (<Separator>                                        size: {Dimension 4 0})
        (<Push-Tool>                                        enabled?: #f size: {Dimension 22 22} tooltip?: #t tooltip-text: "Remove Shortcut" resource: {Image-Resource "Remove"} portfolio: :images action-handler: {Event-Handler :form on-remove}))
      (<Border-View>                   name: actions-border location: center border-type: edge style: entry
        (<Scroller-View>                                    style: document hscroll?: #t vscroll?: #t
          (<content!>                                       layout-type: fill
            (<Tree-Header>                                  style: document
              (<content!>
                (<Tree-View>           name: actions        portfolio: :images filled-column: text double-click-handler: {Event-Handler :form on-double-click}
                  (<Tree-Node-Column>  name: text           title: "Text" width: 235 display-images?: #f toplevel-controls?: #f)
                  (<Tree-Label-Column> name: shortcut       title: "Shortcut" width: 115)))))))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup))
  
  
  (method override (focus-default)
    (let ((tree (locate 'actions)))
      (acquire-focus~ tree)))
  
  
  (method (setup)
    (define (collect-actions)
      (collect-if (lambda (action)
                    (let ((handler (get-action-handler~ action)))
                      (and (is? handler Event-Handler)
                           (eq? (get-method-name~ handler) 'on-insert))))
                  (get-children~ (find-actions 'kalima))))
    
    (let ((actions (collect-actions))
          (tree (locate 'actions)))
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (for-each (lambda (action)
                      (let ((text (get-property~ (get-action-handler~ action) text:))
                            (shortcut (present-shortcut~ (get-shortcut~ action))))
                        (add-row~ tree children: (list (new Tree-Node title: text) (new Tree-Label title: shortcut)) user-data: action)))
                    actions)))))
  
  
  (method (on-add evt)
    )
  
  
  (method (on-remove evt)
    )
  
  
  (method (on-double-click evt)
    (let ((tree (get-sender~ evt)))
      (let ((action (get-single-selected-data~ tree)))
        (when action
          (let ((text (get-property~ (get-action-handler~ action) text:)))
            (set-clipboard-text text)
            (user-message "Clipboard set to {a}" text))))))))
