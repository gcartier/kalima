;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Kalima
;;;


(module kalima jazz


(import (jazz.io))


;;;
;;;; Dictionary
;;;


(definition public *current-dictionary*
  #f)

(definition public (get-current-dictionary)
  *current-dictionary*)

(definition public (set-current-dictionary dictionary)
  (set! *current-dictionary* dictionary))


(definition public (load-dictionary file)
  (call-with-input-file (path-settings file char-encoding: 'UTF)
    (lambda (port)
      (define (read-dictionary)
        (let ((properties (read port)))
          (let ((primary (getf properties primary:))
                (secondary (getf properties secondary:))
                (tertiary (getf properties tertiary:)))
            (new Kalima-Dictionary file primary secondary tertiary))))
      
      (define (read-entries dictionary)
        (let ((entries (read port)))
          (for-each (lambda (entry)
                      (bind (primary secondary tertiary note) entry
                        (add-entry~ dictionary (new Kalima-Entry primary secondary tertiary note))))
                    entries)))
      
      (define (read-themes dictionary)
        (let (iter)
          (let ((theme (read port)))
            (unless (eof-object? theme)
              (bind (subject . references) theme
                (add-theme~ dictionary (new Kalima-Theme dictionary subject references)))
              (iter)))))
      
      (let ((dictionary (read-dictionary)))
        (read-entries dictionary)
        (read-themes dictionary)
        (set-modified?~ dictionary #f)
        dictionary))))


(definition public (save-dictionary dictionary file)
  (call-with-output-file (path-settings file char-encoding: 'UTF)
    (lambda (port)
      (define (print-dictionary)
        (let ((primary (get-primary~ dictionary))
              (secondary (get-secondary~ dictionary))
              (tertiary (get-tertiary~ dictionary)))
          (print-header secondary)
          (format port "(primary: \"{a}\" secondary: \"{a}\" tertiary: \"{a}\"){%}{%}{%}" primary secondary tertiary)
          (print-entries (collect-entries~ dictionary))
          (print-themes (get-themes~ dictionary))))
      
      (define (print-entries entries)
        (format port "(")
        (let ((all (di-sort-ascending entries key: get-primary~)))
          (loop (for entry in all remainder remain)
                (print-entry entry (null? remain))))
        (format port "){%}"))
      
      (define (print-entry entry last?)
        (let ((primary (get-primary~ entry))
              (secondary (get-secondary~ entry))
              (tertiary (get-tertiary~ entry))
              (note (or (get-note~ entry) "")))
          (format port "(\"{a}\" \"{a}\" \"{a}\" \"{a}\")" primary secondary tertiary note))
        (unless last?
          (format port "{%} ")))
      
      (define (print-themes themes)
        (when (not-null? themes)
          (format port "{%}{%}")
          (loop (for theme in themes remainder remain)
                (print-theme theme (null? remain)))))
      
      (define (print-theme theme last?)
        (let ((subject (get-subject~ theme))
              (entries (get-entries~ theme)))
          (print-header subject)
          (format port "({s}" subject)
          (when (not-null? entries)
            (format port "{%}")
            (loop (for entry in entries remainder remain)
                  (let ((reference (get-primary~ entry)))
                    (format port " \"{a}\"" reference)
                    (unless (null? remain)
                      (format port "{%}")))))
          (format port "){%}")
          (unless last?
            (format port "{%}{%}"))))
      
      (define (print-header title)
        (format port ";;;{%}")
        (format port ";;;; {a}{%}" title)
        (format port ";;;{%}{%}{%}"))
      
      (print-dictionary))))


(definition public (merge-dictionaries sec-file ter-file uni-file)
  (let ((sec-dict (load-dictionary sec-file))
        (ter-dict (load-dictionary ter-file)))
    (let ((uni-dict (new Kalima-Dictionary uni-file (get-primary~ sec-dict) (get-secondary~ sec-dict) (get-secondary~ ter-dict))))
      ;; entries
      (let ((sec (table-keys (get-entries~ sec-dict)))
            (ter (table-keys (get-entries~ ter-dict))))
        (let ((both (intersection test: equal? sec ter))
              (only-sec (difference sec ter test: equal?))
              (only-ter (difference ter sec test: equal?)))
          ;; both
          (for-each (lambda (key)
                      (let ((sec-entry (find-entry~ sec-dict key))
                            (ter-entry (find-entry~ ter-dict key)))
                        (add-entry~ uni-dict (new Kalima-Entry
                                               (get-primary~ sec-entry)
                                               (get-secondary~ sec-entry)
                                               (get-secondary~ ter-entry)
                                               (let ((sec-note (get-note~ sec-entry))
                                                     (ter-note (get-note~ ter-entry)))
                                                 (if (not (empty-string? sec-note))
                                                     sec-note
                                                   ter-note))))))
                    both)
          ;; only sec
          (for-each (lambda (key)
                      (let ((entry (find-entry~ sec-dict key)))
                        (add-entry~ uni-dict (new Kalima-Entry
                                               (get-primary~ entry)
                                               (get-secondary~ entry)
                                               ""
                                               (get-note~ entry)))))
                    only-sec)
          ;; only ter
          (for-each (lambda (key)
                      (let ((entry (find-entry~ ter-dict key)))
                        (add-entry~ uni-dict (new Kalima-Entry
                                               (get-primary~ entry)
                                               ""
                                               (get-secondary~ entry)
                                               (get-note~ entry)))))
                    only-ter)))
      ;; themes
      (let ((sec (map get-subject~ (get-themes~ sec-dict)))
            (ter (map get-subject~ (get-themes~ ter-dict))))
        (let ((only-sec (difference sec ter test: equal?))
              (only-ter (difference ter sec test: equal?))
              (both (intersection test: equal? sec ter)))
          ;; only sec
          (for-each (lambda (subject)
                      (let ((theme (find-theme~ sec-dict subject)))
                        (add-theme~ uni-dict (new Kalima-Theme uni-dict subject (map get-primary~ (get-entries~ theme))))))
                    only-sec)
          ;; only ter
          (for-each (lambda (subject)
                      (let ((theme (find-theme~ ter-dict subject)))
                        (add-theme~ uni-dict (new Kalima-Theme uni-dict subject (map get-primary~ (get-entries~ theme))))))
                    only-ter)
          ;; both
          (for-each (lambda (subject)
                      (let ((sec-theme (find-theme~ sec-dict subject))
                            (ter-theme (find-theme~ ter-dict subject)))
                        (add-theme~ uni-dict (new Kalima-Theme uni-dict subject (union test: equal?
                                                                                  (map get-primary~ (get-entries~ sec-theme))
                                                                                  (map get-primary~ (get-entries~ ter-theme)))))))
                    both)))
      (save~ uni-dict)
      uni-dict)))


(definition public (show-notes)
  (let ((dict (get-current-dictionary)))
    (iterate-table (get-entries~ dict)
      (lambda (key entries)
        (let ((entry (car entries)))
          (let ((note (get-note~ entry)))
            (when (not (empty-string? note))
              (debug key note))))))))


(definition public (show-duplicates)
  (let ((dict (get-current-dictionary)))
    (iterate-table (get-entries~ dict)
      (lambda (key entries)
        (when (> (length entries) 1)
          (debug key entries))))))


(definition public (remove-provenance)
  (let ((dict (get-current-dictionary))
        (notes-removed 0)
        (themes-removed 0))
    ;; notes
    (iterate-table (get-entries~ dict)
      (lambda (key entries)
        (for-each (lambda (entry)
                    (when (not (empty-string? (get-note~ entry)))
                      (set-note~ entry "")
                      (increase! notes-removed)))
                  entries)))
    ;; themes
    (for-each (lambda (theme)
                (let ((subject (get-subject~ theme)))
                  (when (or (starts-with? subject "Assimil")
                            (starts-with? subject "Rosetta"))
                    (remove-theme~ dict theme)
                    (increase! themes-removed))))
              (get-themes~ dict))
    (debug 'removed notes-removed 'notes 'and themes-removed 'themes)
    (save~ dict)))


;;;
;;;; Dictionary-Listener
;;;


(interface Dictionary-Listener
  
  
  (method public virtual abstract (entry-change entry)))


;;;
;;;; Kalima-Dictionary
;;;


(class Kalima-Dictionary extends Object
  
  
  (slot file      getter generate)
  (slot primary   getter generate)
  (slot secondary getter generate)
  (slot tertiary  getter generate)
  (slot entries   getter generate)
  (slot themes    getter generate)
  (slot listeners getter generate)
  (slot modified? accessors generate)
  
  
  (method override (initialize file primary secondary tertiary)
    (nextmethod)
    (set! file~self file)
    (set! primary~self primary)
    (set! secondary~self secondary)
    (set! tertiary~self tertiary)
    (set! entries~self (make-table test: equal?))
    (set! themes~self '())
    (set! listeners~self '())
    (set! modified? #f))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s} {s}{? {s}~}" primary secondary tertiary))))
  
  
  (method public (save)
    (if (not file)
        (save-as)
      (save-dictionary self file)
      (set! modified? #f)))
  
  
  (method public (save-as)
    )
  
  
  (method public (find-entry key)
    (let ((entries (table-ref entries key '())))
      (if (not-null? entries)
          (car entries)
        #f)))
  
  
  (method public (require-entry key)
    (or (find-entry key)
        (error "Unable to find entry: {a}" key)))
  
  
  (method public (add-entry entry)
    (table-add entries (get-primary~ entry) entry)
    (set! modified? #t))
  
  
  (method public (remove-entry entry)
    (for-each (lambda (theme)
                (remove-entry~ theme entry))
              themes)
    (table-remove! entries (get-primary~ entry) entry)
    (set! modified? #t))
  
  
  (method public (find-theme subject)
    (find themes subject key: get-subject~ test: di=? return: 'item))
  
  
  (method public (add-theme theme)
    (set! themes (append themes (list theme)))
    (set! modified? #t))
  
  
  (method public (remove-theme theme)
    (set! themes (remove! theme themes))
    (set! modified? #t))
  
  
  (method public (replace-theme theme)
    (let ((actual (find-theme (get-subject~ theme))))
      (if (not actual)
          (add-theme theme)
        (set! themes (substitute actual theme themes))
        (set! modified? #t))))
  
  
  (method public (collect-themes entry)
    (collect-if (lambda (theme)
                  (and (user-theme? theme)
                       (has-entry?~ theme entry)))
                themes))
  
  
  (method public (sort-themes)
    (sort di<? (collect-if user-theme? themes)
      key: get-subject~))
  
  
  (method public (user-theme? theme)
    (not (starts-with? (get-subject~ theme) "<")))
  
  
  (method public (present-entry-themes entry)
    (let ((themes (collect-themes entry)))
      (and (not-null? themes)
           (join (map get-subject~ themes) ", "))))
  
  
  (method public (collect-subjects)
    (map get-subject~ themes))
  
  
  (method public (collect-entries)
    (let ((queue (new-queue)))
      (for-each (lambda (entries)
                  (enqueue-list queue entries))
                (table-values entries))
      (queue-list queue)))
  
  
  (method public (update-entry entry field content)
    (case field
      ((primary)
       (let ((primary (get-primary~ entry)))
         (table-remove! entries primary entry)
         (set-primary~ entry content)
         (table-add entries content entry)))
      ((secondary)
       (set-secondary~ entry content))
      ((tertiary)
       (set-tertiary~ entry content))
      ((note)
       (set-note~ entry content)))
    (set! modified? #t)
    (process-entry-change entry))
  
  
  (method public (update-themes entry entry-themes)
    (for-each (lambda (theme)
                (if (memq? theme entry-themes)
                    (unless (has-entry?~ theme entry)
                      (add-entry~ theme entry))
                  (when (has-entry?~ theme entry)
                    (remove-entry~ theme entry))))
              themes)
    (set! modified? #t)
    (process-entry-change entry))
  
  
  ;;;
  ;;;; Listeners
  ;;;
  
  
  (method public (add-listener listener)
    (set! listeners (cons listener listeners)))
  
  
  (method public (remove-listener listener)
    (set! listeners (remove! listener listeners)))
  
  
  (method (process-entry-change entry)
    (when (not-null? listeners)
      (for-each (lambda (listener)
                  (entry-change~ listener self entry))
                listeners))))


;;;
;;;; Kalima-Theme
;;;


(class Kalima-Theme extends Object
  
  
  (slot dictionary getter generate)
  (slot subject    getter generate)
  (slot entries    getter generate)
  
  
  (method override (initialize dictionary subject references)
    (define (collect-entries)
      (map (lambda (reference)
             (require-entry~ dictionary reference))
           references))
    
    (nextmethod)
    (set! dictionary~self dictionary)
    (set! subject~self subject)
    (set! entries~self (collect-entries)))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" subject))))
  
  
  (method public (has-entry? entry)
    (memq? entry entries))
  
  
  (method public (add-entry entry)
    (set! entries (cons entry entries)))
  
  
  (method public (remove-entry entry)
    (set! entries (remove! entry entries)))
  
  
  (method public (replace-entries lst)
    (set! entries lst))
  
  
  (method public (random-entry)
    (and (not-null? entries) (random-element entries)))
  
  
  (method public (count-entries)
    (length entries)))


;;;
;;;; Kalima-Entry
;;;


(class Kalima-Entry extends Object
  
  
  (slot primary   accessors generate)
  (slot secondary accessors generate)
  (slot tertiary  accessors generate)
  (slot note      accessors generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s} {s} {s} {s}" primary secondary tertiary note))))
  
  
  (method override (initialize primary secondary tertiary note)
    (nextmethod)
    (set! primary~self primary)
    (set! secondary~self secondary)
    (set! tertiary~self tertiary)
    (set! note~self note))))
