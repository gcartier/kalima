;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Kalima
;;;


(module kalima jazz


(import (jazz.io)
        (jazz.platform)
        (jazz.system))


;;;
;;;; Dictionary
;;;


(definition public *current-dictionary*
  #f)

(definition public (get-current-dictionary)
  *current-dictionary*)

(definition public (set-current-dictionary dictionary)
  (set! *current-dictionary* dictionary))


(definition public (load-dictionary file)
  (call-with-input-file (path-settings file char-encoding: 'UTF)
    (lambda (port)
      (define (read-dictionary)
        (let ((properties (read port)))
          (let ((primary (getf properties primary:))
                (secondary (getf properties secondary:)))
            (new Kalima-Dictionary file primary secondary))))
      
      (define (read-entries dictionary)
        (let ((entries (read port)))
          (for-each (lambda (entry)
                      (bind (primary secondary note) entry
                        (add-entry~ dictionary (new Kalima-Entry primary secondary note))))
                    entries)))
      
      (define (read-themes dictionary)
        (let (iter)
          (let ((theme (read port)))
            (unless (eof-object? theme)
              (bind (subject . references) theme
                (add-theme~ dictionary (new Kalima-Theme dictionary subject references)))
              (iter)))))
      
      (let ((dictionary (read-dictionary)))
        (read-entries dictionary)
        (read-themes dictionary)
        dictionary))))


(definition public (save-dictionary dictionary file)
  (call-with-output-file (path-settings file char-encoding: 'UTF)
    (lambda (port)
      (define (print-dictionary)
        (let ((primary (get-primary~ dictionary))
              (secondary (get-secondary~ dictionary)))
          (print-header secondary)
          (format port "(primary: \"{a}\" secondary: \"{a}\"){%}{%}{%}" primary secondary)
          (print-entries (get-entries~ dictionary))
          (print-themes (get-themes~ dictionary))))
      
      (define (print-entries entries)
        (format port "(")
        (let ((all (sort di<? (table-values entries) key: get-primary~)))
          (loop (for entry in all remainder remain)
                (print-entry entry (null? remain))))
        (format port "){%}"))
      
      (define (print-entry entry last?)
        (let ((primary (get-primary~ entry))
              (secondary (get-secondary~ entry))
              (note (or (get-note~ entry) "")))
          (format port "(\"{a}\" \"{a}\" \"{a}\")" primary secondary note))
        (unless last?
          (format port "{%} ")))
      
      (define (print-themes themes)
        (when (not-null? themes)
          (format port "{%}{%}")
          (loop (for theme in themes remainder remain)
                (print-theme theme (null? remain)))))
      
      (define (print-theme theme last?)
        (let ((subject (get-subject~ theme)))
          (print-header subject)
          (format port "({s}{%}" subject)
          (loop (for reference in (get-references~ theme) remainder remain)
                (format port " \"{a}\"" reference)
                (unless (null? remain)
                  (format port "{%}")))
          (format port "){%}")
          (unless last?
            (format port "{%}{%}"))))
      
      (define (print-header title)
        (format port ";;;{%}")
        (format port ";;;; {a}{%}" title)
        (format port ";;;{%}{%}{%}"))
      
      (print-dictionary))))


;;;
;;;; Dictionary-Listener
;;;


(interface Dictionary-Listener
  
  
  (method public virtual abstract (entry-change entry)))


;;;
;;;; Kalima-Dictionary
;;;


(class Kalima-Dictionary extends Object
  
  
  (slot file      getter generate)
  (slot primary   getter generate)
  (slot secondary getter generate)
  (slot entries   getter generate)
  (slot themes    getter generate)
  (slot listeners getter generate)
  (slot modified? accessors generate)
  
  
  (method override (initialize file primary secondary)
    (nextmethod)
    (set! file~self file)
    (set! primary~self primary)
    (set! secondary~self secondary)
    (set! entries~self (make-table test: equal?))
    (set! themes~self '())
    (set! listeners~self '())
    (set! modified? #f))
  
  
  (method public (save)
    (if (not file)
        (save-as)
      (save-dictionary self file)
      (set! modified? #f)))
  
  
  (method public (save-as)
    )
  
  
  (method public (get-entry key)
    (or (table-ref entries key #f)
        (error "Unable to find entry: {a}" key)))
  
  
  (method public (add-entry entry)
    (table-set! entries (get-primary~ entry) entry))
  
  
  (method public (find-theme subject)
    (find themes subject key: get-subject~ test: di=? return: 'item))
  
  
  (method public (add-theme theme)
    (set! themes (append themes (list theme))))
  
  
  (method public (remove-theme theme)
    (set! themes (remove! theme themes)))
  
  
  (method public (replace-theme theme)
    (let ((actual (find-theme (get-subject~ theme))))
      (when actual
        (remove-theme actual))
      (add-theme theme)))
  
  
  (method public (collect-subjects)
    (map get-subject~ themes))
  
  
  (method public (collect-entries)
    (table-values entries))
  
  
  (method public (update-entry entry field content)
    (case field
      ((primary) (set-primary~ entry content))
      ((secondary) (set-secondary~ entry content))
      ((note) (set-note~ entry content)))
    (set! modified? #t)
    (process-entry-change entry))
  
  
  ;;;
  ;;;; Listeners
  ;;;
  
  
  (method public (add-listener listener)
    (set! listeners (cons listener listeners)))
  
  
  (method public (remove-listener listener)
    (set! listeners (remove! listener listeners)))
  
  
  (method (process-entry-change entry)
    (when (not-null? listeners)
      (for-each (lambda (listener)
                  (entry-change~ listener self entry))
                listeners))))


;;;
;;;; Kalima-Theme
;;;


(class Kalima-Theme extends Object
  
  
  (slot dictionary getter generate)
  (slot subject    getter generate)
  (slot references getter generate)
  
  
  (method override (initialize dictionary subject references)
    (nextmethod)
    (set! dictionary~self dictionary)
    (set! subject~self subject)
    (set! references~self references))
  
  
  (method public (get-entries)
    (map (lambda (reference)
           (get-entry~ dictionary reference))
         references)))


;;;
;;;; Kalima-Entry
;;;


(class Kalima-Entry extends Object
  
  
  (slot primary   accessors generate)
  (slot secondary accessors generate)
  (slot note      accessors generate)
  
  
  (method override (initialize primary secondary note)
    (nextmethod)
    (set! primary~self primary)
    (set! secondary~self secondary)
    (set! note~self note))))
